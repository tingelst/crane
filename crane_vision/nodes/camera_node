#!/usr/bin/env python

import rospy
import cv2
import numpy as np
from crane_vision.camera import Camera


def find_sphere_centers(img, c1, c2):
    # HSV colourspace parameters
    v1_min = 43
    v2_min = 54
    v3_min = 86
    v1_max = 73
    v2_max = 250
    v3_max = 255
    blur_param = 5

    # Gaussian blurred image
    blur1 = cv2.GaussianBlur(img, (3+(2*blur_param-2), 3+(2*blur_param-2)), 0)
    # # Convert from RGB to HSV
    hsv1 = cv2.cvtColor(blur1, cv2.COLOR_BGR2HSV)
    # # Binary image based on colours
    mask1 = cv2.inRange(hsv1, (v1_min, v2_min, v3_min),
                        (v1_max, v2_max, v3_max))
    # Find objects in the image
    _, cnts1, _ = cv2.findContours(
        mask1.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    if len(cnts1) > 1:
        # Sort objects based on the contour area and extract the two biggest
        cnts1 = sorted(cnts1, key=cv2.contourArea, reverse=True)[:2]
        # The two objects corresponding to the spheres
        c01 = cnts1[0]
        c02 = cnts1[1]
        # Calculate the moments of the spheres
        M01 = cv2.moments(c01)
        M02 = cv2.moments(c02)
        # Calculate the centorids of the spheres
        if M01["m00"] < 0.000001:
            center01 = c1
        else:
            center01 = (float(M01["m10"] / M01["m00"]),
                        float(M01["m01"] / M01["m00"]))
        if M02["m00"] < 0.000001:
            center02 = c2
        else:
            center02 = (float(M02["m10"] / M02["m00"]),
                        float(M02["m01"] / M02["m00"]))
    else:
        center01 = c1
        center02 = c2

    if center01[1] > center02[1]:
        tmp = center01
        center01 = center02
        center02 = tmp

    return img, center01, center02


def main():
    rospy.init_node('crane_camera_node')

    cam = Camera(2, (1280, 720))

    c1 = (0.0, 0.0)
    c2 = (0.0, 0.0)
    while not rospy.is_shutdown():
        ret, img = cam.read()
        img, c1, c2, = find_sphere_centers(img, c1, c2)
        for c in [c1, c2]:
            (x, y) = c
            center = (int(x), int(y))
            cv2.circle(img, center, 2, (0, 255, 0), 2)
        cv2.imshow('image', img)
        cv2.waitKey(30)

    cv2.destroyAllWindows()


if __name__ == "__main__":
    main()
