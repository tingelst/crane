#!/usr/bin/env python

import rospy
import cv2
import numpy as np
import time

from std_msgs.msg import Float64MultiArray
from sensor_msgs.msg import JointState
from crane_msgs.msg import CraneControl, CranePendulumImagePoints
import message_filters

from crane_vision.transformations import trf
from crane_vision.camera import CameraArray
from crane_vision.vision import find_sphere_centers, find_line
from crane_vision.ekf import ekf

# Camera calibration matrices
K2 = np.array([[937, 0, 637.21],
               [0, 937, 381.54],
               [0, 0,   1.0]])

K1 = np.array([[941, 0, 637.21],
               [0, 941, 349.9],
               [0, 0,   1.0]])

K0 = np.array([[942, 0, 623.66],
               [0, 942, 345.69],
               [0, 0,   1.0]])

# Translation vectors between cameras
t_11 = np.array([0, 0, 0])
t_21 = np.array([233.8, 0, 0])
t_31 = np.array([467, 0, 0])
PII = np.eye(3, 4)

# Camera matrices
P0 = np.dot(np.dot(K0, PII), trf(np.eye(3), t_11))
P1 = np.dot(np.dot(K1, PII), trf(np.eye(3), t_21))
P2 = np.dot(np.dot(K2, PII), trf(np.eye(3), t_31))

debug = False

pendulum_pub = rospy.Publisher('pendulum_joint_states', JointState, queue_size=3)

hat_Pk = np.diag([0, 0, 0, 0, 0, 0])
hat_thetak = np.array([0, 0, 0, 0, np.deg2rad(2.5), np.deg2rad(-1.7)])

Lhat = 1.05  # Debug

ddx = 0.0
ddy = 0.0

previous_time = time.time()
start_time = time.time()

initialized = False

def init_callback(points_msg, joint_state_msg):

    global previous_time
    global hat_Pk
    global hat_thetak
    global initialized

    if not initialized:
        points = np.array(points_msg.points).reshape(-1, 2)
        
        if not np.isnan(points).any():
            center01, center02, center11, center12, center21, center22 = points

            # Find direction vector of a line through the spheres,
            # given in camera coordinates
            Lc0 = find_line(center01, center02,
                            center11, center12,
                            center21, center22,
                            P0, P1, P2)


            # Find direction vector of a line through the spheres,
            # given in inertial coordinates
            q1 = 1.0 * joint_state_msg.position[0]

            Lvec = np.dot(np.array([[-np.cos(q1), 0,  np.sin(q1)],
                                    [np.sin(q1),  0,   np.cos(q1)],
                                    [0,          1.0, 0]]), Lc0)

            if np.linalg.norm(Lvec) > 0.00001:
                Lvec = Lvec / np.linalg.norm(Lvec)

            current_time = time.time()
            dt = current_time - previous_time
            previous_time = current_time

            ddx, ddy = 0.0, 0.0

            hat_thetak, hat_Pk, zk = ekf(Lvec, np.array(
                [ddx, ddy]), hat_Pk, hat_thetak, q1, Lhat, dt)

            th, phi, dth, dphi, _, _ = hat_thetak
            msg = JointState()
            msg.header.stamp = points_msg.header.stamp
            msg.name = ['phix_joint', 'phiy_joint']
            msg.position = [th, phi, zk[0], zk[1]]
            msg.velocity = [dth, dphi, 0.0, 0.0]
            msg.effort = [zk[0], zk[1]]

            pendulum_pub.publish(msg)

def callback(points_msg, joint_state_msg, commanded_msg=None):

    global previous_time
    global hat_Pk
    global hat_thetak
    global initialized

    if not initialized:
        initialized = True
        rospy.loginfo('EKF: Initialized')
    else:
        points = np.array(points_msg.points).reshape(-1, 2)
        
        if not np.isnan(points).any():
            center01, center02, center11, center12, center21, center22 = points

            # Find direction vector of a line through the spheres,
            # given in camera coordinates
            Lc0 = find_line(center01, center02,
                            center11, center12,
                            center21, center22,
                            P0, P1, P2)


            # Find direction vector of a line through the spheres,
            # given in inertial coordinates
            q1 = 1.0 * joint_state_msg.position[0]

            Lvec = np.dot(np.array([[-np.cos(q1), 0,  np.sin(q1)],
                                    [np.sin(q1),  0,   np.cos(q1)],
                                    [0,          1.0, 0]]), Lc0)

            if np.linalg.norm(Lvec) > 0.00001:
                Lvec = Lvec / np.linalg.norm(Lvec)

            current_time = time.time()
            dt = current_time - previous_time
            previous_time = current_time

            ddx, ddy = commanded_msg.gx, commanded_msg.gy

            hat_thetak, hat_Pk, zk = ekf(Lvec, np.array(
                [ddx, ddy]), hat_Pk, hat_thetak, q1, Lhat, dt)

            th, phi, dth, dphi, _, _ = hat_thetak
            msg = JointState()
            msg.header.stamp = points_msg.header.stamp
            msg.name = ['phix_joint', 'phiy_joint']
            msg.position = [th, phi, zk[0], zk[1]]
            msg.velocity = [dth, dphi, 0.0, 0.0]
            msg.effort = [zk[0], zk[1]]

            pendulum_pub.publish(msg)

    
def main():
    rospy.init_node('crane_vision_node')

    points_sub = message_filters.Subscriber('/crane_vision_nodelet/points', CranePendulumImagePoints)
    joint_state_sub = message_filters.Subscriber('/crane_state_controller/joint_states', JointState)

    points_sub2 = message_filters.Subscriber('/crane_vision_nodelet/points', CranePendulumImagePoints)
    joint_state_sub2 = message_filters.Subscriber('/crane_state_controller/joint_states', JointState)
    commanded_sub2 = message_filters.Subscriber(
        '/lyapunov_pendulum_damping_controller/commanded', CraneControl)

    init_ts = message_filters.ApproximateTimeSynchronizer([points_sub, joint_state_sub], queue_size=10, slop=0.01)
    init_ts.registerCallback(init_callback)

    ts = message_filters.ApproximateTimeSynchronizer([points_sub2, joint_state_sub2, commanded_sub2], queue_size=10, slop=0.01)
    ts.registerCallback(callback)

    rospy.spin()

if __name__ == "__main__":
    main()
