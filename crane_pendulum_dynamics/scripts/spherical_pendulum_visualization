#!/usr/bin/env python

import time 
import numpy as np 

import rospy 
from sensor_msgs.msg import JointState

from crane_pendulum_dynamics.rk4 import rk4
from crane_pendulum_dynamics.spherical_pendulum import spherical_pendulum_dyn

class SphericalPendulumVisualization(object):
    def __init__(self):
        self._joint_state_pub = rospy.Publisher('joint_states', JointState, queue_size=5)

    def run(self):

        q = np.array([np.pi/12, 0.0, np.pi/12, 0.0])

        start_time = time.time()
        current_time = start_time
        previous_time = current_time

        rate = rospy.Rate(50)
        while not rospy.is_shutdown():

            current_time = time.time()
            dt = current_time - previous_time
            previous_time = current_time

            # update the time and state
            (t, q) = rk4(current_time, q, dt, spherical_pendulum_dyn)

            msg = JointState()
            msg.header.stamp = rospy.Time.now()
            msg.name.append("phix_joint")
            msg.position.append(q[0])
            msg.velocity.append(q[1])
            msg.name.append("phiy_joint")
            msg.position.append(q[2])
            msg.velocity.append(q[3])
            self._joint_state_pub.publish(msg)

            rate.sleep()


if __name__ == '__main__':
    try:
        rospy.init_node('spherical_pendulum_visualizer')
        spv = SphericalPendulumVisualization()
        spv.run()

    except rospy.ROSInterruptException:
        pass

