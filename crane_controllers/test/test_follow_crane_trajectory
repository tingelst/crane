#! /usr/bin/env python
import rospy

# Brings in the SimpleActionClient
import actionlib

from crane_msgs.msg import FollowCraneTrajectoryActionGoal, FollowCraneTrajectoryAction

def action_client():
    client = actionlib.SimpleActionClient('follow_crane_trajectory', FollowCraneTrajectoryAction)
    client.wait_for_server()
    rospy.loginfo("Server online")
    goal = FollowCraneTrajectoryActionGoal()
    client.send_goal(goal)
    client.wait_for_result()
    return client.get_result()



# def fibonacci_client():
#     # Creates the SimpleActionClient, passing the type of the action
#     # (FibonacciAction) to the constructor.
#     client = actionlib.SimpleActionClient('fibonacci', actionlib_tutorials.msg.FibonacciAction)

#     # Waits until the action server has started up and started
#     # listening for goals.
#     client.wait_for_server()

#     # Creates a goal to send to the action server.
#     goal = actionlib_tutorials.msg.FibonacciGoal(order=20)

#     # Sends the goal to the action server.
#     client.send_goal(goal)

#     # Waits for the server to finish performing the action.
#     client.wait_for_result()

#     # Prints out the result of executing the action
#     return client.get_result()  # A FibonacciResult

if __name__ == '__main__':
    rospy.init_node('follow_crane_trajectory_client')
    result = action_client()